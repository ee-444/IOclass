
IOclass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  0000040c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000012f  00000000  00000000  00000b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c5  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000039d  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000450  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a7  00000000  00000000  00002376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000261d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	82 01       	movw	r16, r4

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 30       	cpi	r26, 0x03	; 3
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	ca e6       	ldi	r28, 0x6A	; 106
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	22 97       	sbiw	r28, 0x02	; 2
  90:	fe 01       	movw	r30, r28
  92:	0e 94 c6 01 	call	0x38c	; 0x38c <__tablejump__>
  96:	c8 36       	cpi	r28, 0x68	; 104
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 8b 01 	call	0x316	; 0x316 <main>
  a0:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <_ZN14ArduinoLibrary3Cio8PinStateENS_7PinTypeE>:
	// set the pullup if necessary
	PullUp(pullup);
}

void Cio::PinState(PinType type)
{
  a8:	fc 01       	movw	r30, r24
	// change the state to input or output
	*(uint8_t*)(_base_peripheral_address+1) &= ~(type << _shift_amt);
  aa:	a0 81       	ld	r26, Z
  ac:	b1 81       	ldd	r27, Z+1	; 0x01
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	cb 01       	movw	r24, r22
  b2:	02 80       	ldd	r0, Z+2	; 0x02
  b4:	02 c0       	rjmp	.+4      	; 0xba <_ZN14ArduinoLibrary3Cio8PinStateENS_7PinTypeE+0x12>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <_ZN14ArduinoLibrary3Cio8PinStateENS_7PinTypeE+0xe>
  be:	98 2f       	mov	r25, r24
  c0:	90 95       	com	r25
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	8c 91       	ld	r24, X
  c6:	11 97       	sbiw	r26, 0x01	; 1
  c8:	89 23       	and	r24, r25
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	8c 93       	st	X, r24
	*(uint8_t*)(_base_peripheral_address+1) |= (type << _shift_amt);
  ce:	a0 81       	ld	r26, Z
  d0:	b1 81       	ldd	r27, Z+1	; 0x01
  d2:	02 80       	ldd	r0, Z+2	; 0x02
  d4:	02 c0       	rjmp	.+4      	; 0xda <_ZN14ArduinoLibrary3Cio8PinStateENS_7PinTypeE+0x32>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <_ZN14ArduinoLibrary3Cio8PinStateENS_7PinTypeE+0x2e>
  de:	11 96       	adiw	r26, 0x01	; 1
  e0:	8c 91       	ld	r24, X
  e2:	11 97       	sbiw	r26, 0x01	; 1
  e4:	86 2b       	or	r24, r22
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	8c 93       	st	X, r24
  ea:	11 97       	sbiw	r26, 0x01	; 1
}
  ec:	08 95       	ret

000000ee <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE>:

void Cio::PullUp(BuiltInPullUp pullup)
{
  ee:	fc 01       	movw	r30, r24
	// only can be done to input pins (0 = input, 1 = output)
	if ((*(uint8_t*)(_base_peripheral_address+1) & (1 << _shift_amt)) != (1 << _shift_amt)){
  f0:	a0 81       	ld	r26, Z
  f2:	b1 81       	ldd	r27, Z+1	; 0x01
  f4:	42 81       	ldd	r20, Z+2	; 0x02
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	04 2e       	mov	r0, r20
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE+0x14>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE+0x10>
 106:	11 96       	adiw	r26, 0x01	; 1
 108:	2c 91       	ld	r18, X
 10a:	11 97       	sbiw	r26, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	28 23       	and	r18, r24
 110:	39 23       	and	r19, r25
 112:	82 17       	cp	r24, r18
 114:	93 07       	cpc	r25, r19
 116:	f1 f0       	breq	.+60     	; 0x154 <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE+0x66>
		// set the bit of the associated pin
		*(uint8_t*)(_base_peripheral_address+2) &= ~(pullup << _shift_amt);
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	cb 01       	movw	r24, r22
 11c:	02 c0       	rjmp	.+4      	; 0x122 <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE+0x34>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	4a 95       	dec	r20
 124:	e2 f7       	brpl	.-8      	; 0x11e <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE+0x30>
 126:	ac 01       	movw	r20, r24
 128:	40 95       	com	r20
 12a:	12 96       	adiw	r26, 0x02	; 2
 12c:	8c 91       	ld	r24, X
 12e:	12 97       	sbiw	r26, 0x02	; 2
 130:	84 23       	and	r24, r20
 132:	12 96       	adiw	r26, 0x02	; 2
 134:	8c 93       	st	X, r24
		*(uint8_t*)(_base_peripheral_address+2) |= (pullup << _shift_amt);	
 136:	a0 81       	ld	r26, Z
 138:	b1 81       	ldd	r27, Z+1	; 0x01
 13a:	02 80       	ldd	r0, Z+2	; 0x02
 13c:	02 c0       	rjmp	.+4      	; 0x142 <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE+0x54>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE+0x50>
 146:	12 96       	adiw	r26, 0x02	; 2
 148:	8c 91       	ld	r24, X
 14a:	12 97       	sbiw	r26, 0x02	; 2
 14c:	86 2b       	or	r24, r22
 14e:	12 96       	adiw	r26, 0x02	; 2
 150:	8c 93       	st	X, r24
 152:	12 97       	sbiw	r26, 0x02	; 2
 154:	08 95       	ret

00000156 <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE>:

#include "Cio.h"

namespace ArduinoLibrary{

Cio::Cio(PinName name, PinType type, BuiltInPullUp pullup)
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	0f 92       	push	r0
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	8c 01       	movw	r16, r24
{
	// setup the PORTA pins (PB_BASE-1)
	if (name < PB_BASE){
 166:	6f 3f       	cpi	r22, 0xFF	; 255
 168:	71 05       	cpc	r23, r1
 16a:	a1 f0       	breq	.+40     	; 0x194 <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
 16c:	9c f0       	brlt	.+38     	; 0x194 <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTB pins (PC_BASE-1)
	else if (name < PC_BASE){
 16e:	32 e0       	ldi	r19, 0x02	; 2
 170:	60 30       	cpi	r22, 0x00	; 0
 172:	73 07       	cpc	r23, r19
 174:	fc f0       	brlt	.+62     	; 0x1b4 <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x5e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTC pins (PD_BASE-1)
	else if (name < PD_BASE){
 176:	f4 e0       	ldi	r31, 0x04	; 4
 178:	60 30       	cpi	r22, 0x00	; 0
 17a:	7f 07       	cpc	r23, r31
 17c:	1c f1       	brlt	.+70     	; 0x1c4 <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x6e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTD pins (Px_BASE-1)
	else if (name < Px_BASE){
 17e:	f8 e0       	ldi	r31, 0x08	; 8
 180:	60 30       	cpi	r22, 0x00	; 0
 182:	7f 07       	cpc	r23, r31
 184:	3c f4       	brge	.+14     	; 0x194 <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
		#ifdef PIND
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PIND;
 186:	89 e2       	ldi	r24, 0x29	; 41
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	f8 01       	movw	r30, r16
 18c:	91 83       	std	Z+1, r25	; 0x01
 18e:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 190:	67 70       	andi	r22, 0x07	; 7
 192:	62 83       	std	Z+2, r22	; 0x02
		#endif
	}
	// set up the pin according to the parameters
	PinState(type);
 194:	c8 01       	movw	r24, r16
 196:	64 2f       	mov	r22, r20
 198:	29 83       	std	Y+1, r18	; 0x01
 19a:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN14ArduinoLibrary3Cio8PinStateENS_7PinTypeE>
	// set the pullup if necessary
	PullUp(pullup);
 19e:	c8 01       	movw	r24, r16
 1a0:	29 81       	ldd	r18, Y+1	; 0x01
 1a2:	62 2f       	mov	r22, r18
 1a4:	0e 94 77 00 	call	0xee	; 0xee <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE>
}
 1a8:	0f 90       	pop	r0
 1aa:	cf 91       	pop	r28
 1ac:	df 91       	pop	r29
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret
	}
	// setup the PORTB pins (PC_BASE-1)
	else if (name < PC_BASE){
		#ifdef PINB
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PINB;
 1b4:	83 e2       	ldi	r24, 0x23	; 35
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	f8 01       	movw	r30, r16
 1ba:	91 83       	std	Z+1, r25	; 0x01
 1bc:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 1be:	67 70       	andi	r22, 0x07	; 7
 1c0:	62 83       	std	Z+2, r22	; 0x02
 1c2:	e8 cf       	rjmp	.-48     	; 0x194 <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
	}
	// setup the PORTC pins (PD_BASE-1)
	else if (name < PD_BASE){
		#ifdef PINC
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PINC;
 1c4:	86 e2       	ldi	r24, 0x26	; 38
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	f8 01       	movw	r30, r16
 1ca:	91 83       	std	Z+1, r25	; 0x01
 1cc:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 1ce:	67 70       	andi	r22, 0x07	; 7
 1d0:	62 83       	std	Z+2, r22	; 0x02
 1d2:	e0 cf       	rjmp	.-64     	; 0x194 <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>

000001d4 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE>:

#include "Cio.h"

namespace ArduinoLibrary{

Cio::Cio(PinName name, PinType type, BuiltInPullUp pullup)
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	df 93       	push	r29
 1da:	cf 93       	push	r28
 1dc:	0f 92       	push	r0
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	8c 01       	movw	r16, r24
{
	// setup the PORTA pins (PB_BASE-1)
	if (name < PB_BASE){
 1e4:	6f 3f       	cpi	r22, 0xFF	; 255
 1e6:	71 05       	cpc	r23, r1
 1e8:	a1 f0       	breq	.+40     	; 0x212 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
 1ea:	9c f0       	brlt	.+38     	; 0x212 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTB pins (PC_BASE-1)
	else if (name < PC_BASE){
 1ec:	32 e0       	ldi	r19, 0x02	; 2
 1ee:	60 30       	cpi	r22, 0x00	; 0
 1f0:	73 07       	cpc	r23, r19
 1f2:	fc f0       	brlt	.+62     	; 0x232 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x5e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTC pins (PD_BASE-1)
	else if (name < PD_BASE){
 1f4:	f4 e0       	ldi	r31, 0x04	; 4
 1f6:	60 30       	cpi	r22, 0x00	; 0
 1f8:	7f 07       	cpc	r23, r31
 1fa:	1c f1       	brlt	.+70     	; 0x242 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x6e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTD pins (Px_BASE-1)
	else if (name < Px_BASE){
 1fc:	f8 e0       	ldi	r31, 0x08	; 8
 1fe:	60 30       	cpi	r22, 0x00	; 0
 200:	7f 07       	cpc	r23, r31
 202:	3c f4       	brge	.+14     	; 0x212 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
		#ifdef PIND
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PIND;
 204:	89 e2       	ldi	r24, 0x29	; 41
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	f8 01       	movw	r30, r16
 20a:	91 83       	std	Z+1, r25	; 0x01
 20c:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 20e:	67 70       	andi	r22, 0x07	; 7
 210:	62 83       	std	Z+2, r22	; 0x02
		#endif
	}
	// set up the pin according to the parameters
	PinState(type);
 212:	c8 01       	movw	r24, r16
 214:	64 2f       	mov	r22, r20
 216:	29 83       	std	Y+1, r18	; 0x01
 218:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN14ArduinoLibrary3Cio8PinStateENS_7PinTypeE>
	// set the pullup if necessary
	PullUp(pullup);
 21c:	c8 01       	movw	r24, r16
 21e:	29 81       	ldd	r18, Y+1	; 0x01
 220:	62 2f       	mov	r22, r18
 222:	0e 94 77 00 	call	0xee	; 0xee <_ZN14ArduinoLibrary3Cio6PullUpENS_13BuiltInPullUpE>
}
 226:	0f 90       	pop	r0
 228:	cf 91       	pop	r28
 22a:	df 91       	pop	r29
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret
	}
	// setup the PORTB pins (PC_BASE-1)
	else if (name < PC_BASE){
		#ifdef PINB
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PINB;
 232:	83 e2       	ldi	r24, 0x23	; 35
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	f8 01       	movw	r30, r16
 238:	91 83       	std	Z+1, r25	; 0x01
 23a:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 23c:	67 70       	andi	r22, 0x07	; 7
 23e:	62 83       	std	Z+2, r22	; 0x02
 240:	e8 cf       	rjmp	.-48     	; 0x212 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
	}
	// setup the PORTC pins (PD_BASE-1)
	else if (name < PD_BASE){
		#ifdef PINC
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PINC;
 242:	86 e2       	ldi	r24, 0x26	; 38
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	f8 01       	movw	r30, r16
 248:	91 83       	std	Z+1, r25	; 0x01
 24a:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 24c:	67 70       	andi	r22, 0x07	; 7
 24e:	62 83       	std	Z+2, r22	; 0x02
 250:	e0 cf       	rjmp	.-64     	; 0x212 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>

00000252 <_ZN14ArduinoLibrary3Cio6SetPinEv>:
		*(uint8_t*)(_base_peripheral_address+2) |= (pullup << _shift_amt);	
	}
}

void Cio::SetPin()
{
 252:	fc 01       	movw	r30, r24
	// only can be done to output pins (0 = input, 1 = output)
	if((*(uint8_t*)(_base_peripheral_address+1) & (1 << _shift_amt)) == (1 << _shift_amt)){
 254:	a0 81       	ld	r26, Z
 256:	b1 81       	ldd	r27, Z+1	; 0x01
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	02 80       	ldd	r0, Z+2	; 0x02
 25e:	02 c0       	rjmp	.+4      	; 0x264 <_ZN14ArduinoLibrary3Cio6SetPinEv+0x12>
 260:	22 0f       	add	r18, r18
 262:	33 1f       	adc	r19, r19
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <_ZN14ArduinoLibrary3Cio6SetPinEv+0xe>
 268:	11 96       	adiw	r26, 0x01	; 1
 26a:	8c 91       	ld	r24, X
 26c:	11 97       	sbiw	r26, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	82 23       	and	r24, r18
 272:	93 23       	and	r25, r19
 274:	28 17       	cp	r18, r24
 276:	39 07       	cpc	r19, r25
 278:	09 f0       	breq	.+2      	; 0x27c <_ZN14ArduinoLibrary3Cio6SetPinEv+0x2a>
 27a:	08 95       	ret
		// write to the bit location in the register associated with this object
		*(uint8_t*)(_base_peripheral_address+2) |= (1 << _shift_amt);
 27c:	12 96       	adiw	r26, 0x02	; 2
 27e:	8c 91       	ld	r24, X
 280:	12 97       	sbiw	r26, 0x02	; 2
 282:	82 2b       	or	r24, r18
 284:	12 96       	adiw	r26, 0x02	; 2
 286:	8c 93       	st	X, r24
 288:	12 97       	sbiw	r26, 0x02	; 2
 28a:	08 95       	ret

0000028c <_ZN14ArduinoLibrary3Cio6ClrPinEv>:
	} 
}

void Cio::ClrPin()
{
 28c:	fc 01       	movw	r30, r24
	// only can be done to output pins (0 = input, 1 = output)
	if((*(uint8_t*)(_base_peripheral_address+1) & (1 << _shift_amt)) == (1 << _shift_amt)){
 28e:	a0 81       	ld	r26, Z
 290:	b1 81       	ldd	r27, Z+1	; 0x01
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	02 80       	ldd	r0, Z+2	; 0x02
 298:	02 c0       	rjmp	.+4      	; 0x29e <_ZN14ArduinoLibrary3Cio6ClrPinEv+0x12>
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <_ZN14ArduinoLibrary3Cio6ClrPinEv+0xe>
 2a2:	11 96       	adiw	r26, 0x01	; 1
 2a4:	8c 91       	ld	r24, X
 2a6:	11 97       	sbiw	r26, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	82 23       	and	r24, r18
 2ac:	93 23       	and	r25, r19
 2ae:	28 17       	cp	r18, r24
 2b0:	39 07       	cpc	r19, r25
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <_ZN14ArduinoLibrary3Cio6ClrPinEv+0x2a>
 2b4:	08 95       	ret
		// write to the bit location in the register associated with this object
		*(uint8_t*)(_base_peripheral_address+2) &= ~(1 << _shift_amt);
 2b6:	20 95       	com	r18
 2b8:	12 96       	adiw	r26, 0x02	; 2
 2ba:	8c 91       	ld	r24, X
 2bc:	12 97       	sbiw	r26, 0x02	; 2
 2be:	82 23       	and	r24, r18
 2c0:	12 96       	adiw	r26, 0x02	; 2
 2c2:	8c 93       	st	X, r24
 2c4:	12 97       	sbiw	r26, 0x02	; 2
 2c6:	08 95       	ret

000002c8 <_ZN14ArduinoLibrary3Cio4ReadEv>:
	} 
}

uint8_t Cio::Read()
{
 2c8:	fc 01       	movw	r30, r24
	uint8_t result = (*(uint8_t*)(_base_peripheral_address) & (1 << _shift_amt));
 2ca:	42 81       	ldd	r20, Z+2	; 0x02
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	04 2e       	mov	r0, r20
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <_ZN14ArduinoLibrary3Cio4ReadEv+0x10>
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <_ZN14ArduinoLibrary3Cio4ReadEv+0xc>
 2dc:	01 90       	ld	r0, Z+
 2de:	f0 81       	ld	r31, Z
 2e0:	e0 2d       	mov	r30, r0
 2e2:	80 81       	ld	r24, Z
 2e4:	82 23       	and	r24, r18
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <_ZN14ArduinoLibrary3Cio4ReadEv+0x26>
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	4a 95       	dec	r20
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <_ZN14ArduinoLibrary3Cio4ReadEv+0x22>
	return (result >> _shift_amt);
}
 2f2:	08 95       	ret

000002f4 <_ZN14ArduinoLibrary3Cio5WriteEh>:

void Cio::Write(uint8_t value)
{
	if (value){
 2f4:	66 23       	and	r22, r22
 2f6:	19 f4       	brne	.+6      	; 0x2fe <_ZN14ArduinoLibrary3Cio5WriteEh+0xa>
		SetPin();
	}
	else{
		ClrPin();
 2f8:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN14ArduinoLibrary3Cio6ClrPinEv>
 2fc:	08 95       	ret
}

void Cio::Write(uint8_t value)
{
	if (value){
		SetPin();
 2fe:	0e 94 29 01 	call	0x252	; 0x252 <_ZN14ArduinoLibrary3Cio6SetPinEv>
 302:	08 95       	ret

00000304 <_GLOBAL__I_pin1>:
// Test implementation file
//

#include "main.h"

Cio pin1 (PIN_PB5, PINTYPE_OUTPUT);
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	65 e0       	ldi	r22, 0x05	; 5
 30a:	71 e0       	ldi	r23, 0x01	; 1
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	0e 94 ab 00 	call	0x156	; 0x156 <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE>
		if (pin1 == 1)
			pin1 = 0;
		else
			pin1 = 1;
	}
}
 314:	08 95       	ret

00000316 <main>:
	void ClrPin();
	uint8_t Read();
	// operator overloading for easy coding :-)
	//  = as in write to the objest
	Cio& operator= (uint8_t value){ 
		Write(value); 
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN14ArduinoLibrary3Cio5WriteEh>
		Write(rhs.Read()); 
		return *this; 
	}
	//  = as in read contents to a variable
	operator uint8_t(){
		return Read(); 
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN14ArduinoLibrary3Cio4ReadEv>
	void ClrPin();
	uint8_t Read();
	// operator overloading for easy coding :-)
	//  = as in write to the objest
	Cio& operator= (uint8_t value){ 
		Write(value); 
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN14ArduinoLibrary3Cio5WriteEh>
		Write(rhs.Read()); 
		return *this; 
	}
	//  = as in read contents to a variable
	operator uint8_t(){
		return Read(); 
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN14ArduinoLibrary3Cio4ReadEv>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	dc 01       	movw	r26, r24
	pin1 = 1;
	tmp = pin1;
	pin1 = 0;
	tmp = pin1;
	while(1){
		for(uint32_t i=0; i<280000; i++);
 340:	80 3c       	cpi	r24, 0xC0	; 192
 342:	25 e4       	ldi	r18, 0x45	; 69
 344:	92 07       	cpc	r25, r18
 346:	24 e0       	ldi	r18, 0x04	; 4
 348:	a2 07       	cpc	r26, r18
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	b2 07       	cpc	r27, r18
 34e:	78 f0       	brcs	.+30     	; 0x36e <main+0x58>
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN14ArduinoLibrary3Cio4ReadEv>
		if (pin1 == 1)
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	69 f0       	breq	.+26     	; 0x376 <main+0x60>
	void ClrPin();
	uint8_t Read();
	// operator overloading for easy coding :-)
	//  = as in write to the objest
	Cio& operator= (uint8_t value){ 
		Write(value); 
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN14ArduinoLibrary3Cio5WriteEh>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	dc 01       	movw	r26, r24
 36c:	e9 cf       	rjmp	.-46     	; 0x340 <main+0x2a>
	pin1 = 1;
	tmp = pin1;
	pin1 = 0;
	tmp = pin1;
	while(1){
		for(uint32_t i=0; i<280000; i++);
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	a1 1d       	adc	r26, r1
 372:	b1 1d       	adc	r27, r1
 374:	e5 cf       	rjmp	.-54     	; 0x340 <main+0x2a>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN14ArduinoLibrary3Cio5WriteEh>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	dc 01       	movw	r26, r24
 386:	dc cf       	rjmp	.-72     	; 0x340 <main+0x2a>

00000388 <__tablejump2__>:
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31

0000038c <__tablejump__>:
 38c:	05 90       	lpm	r0, Z+
 38e:	f4 91       	lpm	r31, Z+
 390:	e0 2d       	mov	r30, r0
 392:	09 94       	ijmp

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
