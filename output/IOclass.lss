
IOclass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  00000450  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000016b  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a75  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003eb  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000498  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cf  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000286f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	d1 01       	movw	r26, r2

0000006a <__ctors_end>:
  6a:	d6 01       	movw	r26, r12

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a3 30       	cpi	r26, 0x03	; 3
  84:	b1 07       	cpc	r27, r17
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	ca e6       	ldi	r28, 0x6A	; 106
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	22 97       	sbiw	r28, 0x02	; 2
  92:	fe 01       	movw	r30, r28
  94:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__tablejump__>
  98:	c8 36       	cpi	r28, 0x68	; 104
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  a2:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__do_global_dtors>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_ZN14ArduinoLibrary3CioD2Ev>:
}

Cio::~Cio()
{

}
  aa:	08 95       	ret

000000ac <_ZN14ArduinoLibrary3CioD1Ev>:
  ac:	08 95       	ret

000000ae <_ZN14ArduinoLibrary3Cio8pinStateENS_7PinTypeE>:

void Cio::pinState(PinType type)
{
  ae:	fc 01       	movw	r30, r24
	// change the state to input or output
	*(uint8_t*)(_base_peripheral_address+1) &= ~(type << _shift_amt);
  b0:	a0 81       	ld	r26, Z
  b2:	b1 81       	ldd	r27, Z+1	; 0x01
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	cb 01       	movw	r24, r22
  b8:	02 80       	ldd	r0, Z+2	; 0x02
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <_ZN14ArduinoLibrary3Cio8pinStateENS_7PinTypeE+0x12>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <_ZN14ArduinoLibrary3Cio8pinStateENS_7PinTypeE+0xe>
  c4:	98 2f       	mov	r25, r24
  c6:	90 95       	com	r25
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	8c 91       	ld	r24, X
  cc:	11 97       	sbiw	r26, 0x01	; 1
  ce:	89 23       	and	r24, r25
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	8c 93       	st	X, r24
	*(uint8_t*)(_base_peripheral_address+1) |= (type << _shift_amt);
  d4:	a0 81       	ld	r26, Z
  d6:	b1 81       	ldd	r27, Z+1	; 0x01
  d8:	02 80       	ldd	r0, Z+2	; 0x02
  da:	02 c0       	rjmp	.+4      	; 0xe0 <_ZN14ArduinoLibrary3Cio8pinStateENS_7PinTypeE+0x32>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <_ZN14ArduinoLibrary3Cio8pinStateENS_7PinTypeE+0x2e>
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	8c 91       	ld	r24, X
  e8:	11 97       	sbiw	r26, 0x01	; 1
  ea:	86 2b       	or	r24, r22
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	8c 93       	st	X, r24
  f0:	11 97       	sbiw	r26, 0x01	; 1
}
  f2:	08 95       	ret

000000f4 <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE>:

void Cio::pullUp(BuiltInPullUp pullup)
{
  f4:	fc 01       	movw	r30, r24
	// only can be done to input pins (0 = input, 1 = output)
	if ((*(uint8_t*)(_base_peripheral_address+1) & (1 << _shift_amt)) != (1 << _shift_amt)){
  f6:	a0 81       	ld	r26, Z
  f8:	b1 81       	ldd	r27, Z+1	; 0x01
  fa:	42 81       	ldd	r20, Z+2	; 0x02
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	04 2e       	mov	r0, r20
 102:	02 c0       	rjmp	.+4      	; 0x108 <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE+0x14>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE+0x10>
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	2c 91       	ld	r18, X
 110:	11 97       	sbiw	r26, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	28 23       	and	r18, r24
 116:	39 23       	and	r19, r25
 118:	82 17       	cp	r24, r18
 11a:	93 07       	cpc	r25, r19
 11c:	f1 f0       	breq	.+60     	; 0x15a <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE+0x66>
		// set the bit of the associated pin
		*(uint8_t*)(_base_peripheral_address+2) &= ~(pullup << _shift_amt);
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	cb 01       	movw	r24, r22
 122:	02 c0       	rjmp	.+4      	; 0x128 <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE+0x34>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	4a 95       	dec	r20
 12a:	e2 f7       	brpl	.-8      	; 0x124 <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE+0x30>
 12c:	ac 01       	movw	r20, r24
 12e:	40 95       	com	r20
 130:	12 96       	adiw	r26, 0x02	; 2
 132:	8c 91       	ld	r24, X
 134:	12 97       	sbiw	r26, 0x02	; 2
 136:	84 23       	and	r24, r20
 138:	12 96       	adiw	r26, 0x02	; 2
 13a:	8c 93       	st	X, r24
		*(uint8_t*)(_base_peripheral_address+2) |= (pullup << _shift_amt);	
 13c:	a0 81       	ld	r26, Z
 13e:	b1 81       	ldd	r27, Z+1	; 0x01
 140:	02 80       	ldd	r0, Z+2	; 0x02
 142:	02 c0       	rjmp	.+4      	; 0x148 <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE+0x54>
 144:	66 0f       	add	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE+0x50>
 14c:	12 96       	adiw	r26, 0x02	; 2
 14e:	8c 91       	ld	r24, X
 150:	12 97       	sbiw	r26, 0x02	; 2
 152:	86 2b       	or	r24, r22
 154:	12 96       	adiw	r26, 0x02	; 2
 156:	8c 93       	st	X, r24
 158:	12 97       	sbiw	r26, 0x02	; 2
 15a:	08 95       	ret

0000015c <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE>:

#include "Cio.h"

namespace ArduinoLibrary{

Cio::Cio(PinName name, PinType type, BuiltInPullUp pullup)
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	0f 92       	push	r0
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	8c 01       	movw	r16, r24
{
	// setup the PORTA pins (PB_BASE-1)
	if (name < PB_BASE){
 16c:	6f 3f       	cpi	r22, 0xFF	; 255
 16e:	71 05       	cpc	r23, r1
 170:	a1 f0       	breq	.+40     	; 0x19a <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
 172:	9c f0       	brlt	.+38     	; 0x19a <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTB pins (PC_BASE-1)
	else if (name < PC_BASE){
 174:	32 e0       	ldi	r19, 0x02	; 2
 176:	60 30       	cpi	r22, 0x00	; 0
 178:	73 07       	cpc	r23, r19
 17a:	fc f0       	brlt	.+62     	; 0x1ba <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x5e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTC pins (PD_BASE-1)
	else if (name < PD_BASE){
 17c:	f4 e0       	ldi	r31, 0x04	; 4
 17e:	60 30       	cpi	r22, 0x00	; 0
 180:	7f 07       	cpc	r23, r31
 182:	1c f1       	brlt	.+70     	; 0x1ca <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x6e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTD pins (Px_BASE-1)
	else if (name < Px_BASE){
 184:	f8 e0       	ldi	r31, 0x08	; 8
 186:	60 30       	cpi	r22, 0x00	; 0
 188:	7f 07       	cpc	r23, r31
 18a:	3c f4       	brge	.+14     	; 0x19a <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
		#ifdef PIND
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PIND;
 18c:	89 e2       	ldi	r24, 0x29	; 41
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	f8 01       	movw	r30, r16
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 196:	67 70       	andi	r22, 0x07	; 7
 198:	62 83       	std	Z+2, r22	; 0x02
		#endif
	}
	// set up the pin according to the parameters
	pinState(type);
 19a:	c8 01       	movw	r24, r16
 19c:	64 2f       	mov	r22, r20
 19e:	29 83       	std	Y+1, r18	; 0x01
 1a0:	0e 94 57 00 	call	0xae	; 0xae <_ZN14ArduinoLibrary3Cio8pinStateENS_7PinTypeE>
	// set the pullup if necessary
	pullUp(pullup);
 1a4:	c8 01       	movw	r24, r16
 1a6:	29 81       	ldd	r18, Y+1	; 0x01
 1a8:	62 2f       	mov	r22, r18
 1aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE>
}
 1ae:	0f 90       	pop	r0
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret
	}
	// setup the PORTB pins (PC_BASE-1)
	else if (name < PC_BASE){
		#ifdef PINB
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PINB;
 1ba:	83 e2       	ldi	r24, 0x23	; 35
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	f8 01       	movw	r30, r16
 1c0:	91 83       	std	Z+1, r25	; 0x01
 1c2:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 1c4:	67 70       	andi	r22, 0x07	; 7
 1c6:	62 83       	std	Z+2, r22	; 0x02
 1c8:	e8 cf       	rjmp	.-48     	; 0x19a <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
	}
	// setup the PORTC pins (PD_BASE-1)
	else if (name < PD_BASE){
		#ifdef PINC
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PINC;
 1ca:	86 e2       	ldi	r24, 0x26	; 38
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	f8 01       	movw	r30, r16
 1d0:	91 83       	std	Z+1, r25	; 0x01
 1d2:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 1d4:	67 70       	andi	r22, 0x07	; 7
 1d6:	62 83       	std	Z+2, r22	; 0x02
 1d8:	e0 cf       	rjmp	.-64     	; 0x19a <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>

000001da <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE>:

#include "Cio.h"

namespace ArduinoLibrary{

Cio::Cio(PinName name, PinType type, BuiltInPullUp pullup)
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	df 93       	push	r29
 1e0:	cf 93       	push	r28
 1e2:	0f 92       	push	r0
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	8c 01       	movw	r16, r24
{
	// setup the PORTA pins (PB_BASE-1)
	if (name < PB_BASE){
 1ea:	6f 3f       	cpi	r22, 0xFF	; 255
 1ec:	71 05       	cpc	r23, r1
 1ee:	a1 f0       	breq	.+40     	; 0x218 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
 1f0:	9c f0       	brlt	.+38     	; 0x218 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTB pins (PC_BASE-1)
	else if (name < PC_BASE){
 1f2:	32 e0       	ldi	r19, 0x02	; 2
 1f4:	60 30       	cpi	r22, 0x00	; 0
 1f6:	73 07       	cpc	r23, r19
 1f8:	fc f0       	brlt	.+62     	; 0x238 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x5e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTC pins (PD_BASE-1)
	else if (name < PD_BASE){
 1fa:	f4 e0       	ldi	r31, 0x04	; 4
 1fc:	60 30       	cpi	r22, 0x00	; 0
 1fe:	7f 07       	cpc	r23, r31
 200:	1c f1       	brlt	.+70     	; 0x248 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x6e>
		// only 8 bit device
		_shift_amt = (name & 0x7);
		#endif
	}
	// setup the PORTD pins (Px_BASE-1)
	else if (name < Px_BASE){
 202:	f8 e0       	ldi	r31, 0x08	; 8
 204:	60 30       	cpi	r22, 0x00	; 0
 206:	7f 07       	cpc	r23, r31
 208:	3c f4       	brge	.+14     	; 0x218 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
		#ifdef PIND
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PIND;
 20a:	89 e2       	ldi	r24, 0x29	; 41
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	f8 01       	movw	r30, r16
 210:	91 83       	std	Z+1, r25	; 0x01
 212:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 214:	67 70       	andi	r22, 0x07	; 7
 216:	62 83       	std	Z+2, r22	; 0x02
		#endif
	}
	// set up the pin according to the parameters
	pinState(type);
 218:	c8 01       	movw	r24, r16
 21a:	64 2f       	mov	r22, r20
 21c:	29 83       	std	Y+1, r18	; 0x01
 21e:	0e 94 57 00 	call	0xae	; 0xae <_ZN14ArduinoLibrary3Cio8pinStateENS_7PinTypeE>
	// set the pullup if necessary
	pullUp(pullup);
 222:	c8 01       	movw	r24, r16
 224:	29 81       	ldd	r18, Y+1	; 0x01
 226:	62 2f       	mov	r22, r18
 228:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN14ArduinoLibrary3Cio6pullUpENS_13BuiltInPullUpE>
}
 22c:	0f 90       	pop	r0
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret
	}
	// setup the PORTB pins (PC_BASE-1)
	else if (name < PC_BASE){
		#ifdef PINB
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PINB;
 238:	83 e2       	ldi	r24, 0x23	; 35
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	f8 01       	movw	r30, r16
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 242:	67 70       	andi	r22, 0x07	; 7
 244:	62 83       	std	Z+2, r22	; 0x02
 246:	e8 cf       	rjmp	.-48     	; 0x218 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>
	}
	// setup the PORTC pins (PD_BASE-1)
	else if (name < PD_BASE){
		#ifdef PINC
		// register map = PINB -> DDRB -> PORTB
		_base_peripheral_address = (uint8_t*)&PINC;
 248:	86 e2       	ldi	r24, 0x26	; 38
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	f8 01       	movw	r30, r16
 24e:	91 83       	std	Z+1, r25	; 0x01
 250:	80 83       	st	Z, r24
		// only 8 bit device
		_shift_amt = (name & 0x7);
 252:	67 70       	andi	r22, 0x07	; 7
 254:	62 83       	std	Z+2, r22	; 0x02
 256:	e0 cf       	rjmp	.-64     	; 0x218 <_ZN14ArduinoLibrary3CioC2ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE+0x3e>

00000258 <_ZN14ArduinoLibrary3Cio6setPinEv>:
		*(uint8_t*)(_base_peripheral_address+2) |= (pullup << _shift_amt);	
	}
}

void Cio::setPin()
{
 258:	fc 01       	movw	r30, r24
	// only can be done to output pins (0 = input, 1 = output)
	if((*(uint8_t*)(_base_peripheral_address+1) & (1 << _shift_amt)) == (1 << _shift_amt)){
 25a:	a0 81       	ld	r26, Z
 25c:	b1 81       	ldd	r27, Z+1	; 0x01
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	02 80       	ldd	r0, Z+2	; 0x02
 264:	02 c0       	rjmp	.+4      	; 0x26a <_ZN14ArduinoLibrary3Cio6setPinEv+0x12>
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <_ZN14ArduinoLibrary3Cio6setPinEv+0xe>
 26e:	11 96       	adiw	r26, 0x01	; 1
 270:	8c 91       	ld	r24, X
 272:	11 97       	sbiw	r26, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	82 23       	and	r24, r18
 278:	93 23       	and	r25, r19
 27a:	28 17       	cp	r18, r24
 27c:	39 07       	cpc	r19, r25
 27e:	09 f0       	breq	.+2      	; 0x282 <_ZN14ArduinoLibrary3Cio6setPinEv+0x2a>
 280:	08 95       	ret
		// write to the bit location in the register associated with this object
		*(uint8_t*)(_base_peripheral_address+2) |= (1 << _shift_amt);
 282:	12 96       	adiw	r26, 0x02	; 2
 284:	8c 91       	ld	r24, X
 286:	12 97       	sbiw	r26, 0x02	; 2
 288:	82 2b       	or	r24, r18
 28a:	12 96       	adiw	r26, 0x02	; 2
 28c:	8c 93       	st	X, r24
 28e:	12 97       	sbiw	r26, 0x02	; 2
 290:	08 95       	ret

00000292 <_ZN14ArduinoLibrary3Cio6clrPinEv>:
	} 
}

void Cio::clrPin()
{
 292:	fc 01       	movw	r30, r24
	// only can be done to output pins (0 = input, 1 = output)
	if((*(uint8_t*)(_base_peripheral_address+1) & (1 << _shift_amt)) == (1 << _shift_amt)){
 294:	a0 81       	ld	r26, Z
 296:	b1 81       	ldd	r27, Z+1	; 0x01
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	02 80       	ldd	r0, Z+2	; 0x02
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <_ZN14ArduinoLibrary3Cio6clrPinEv+0x12>
 2a0:	22 0f       	add	r18, r18
 2a2:	33 1f       	adc	r19, r19
 2a4:	0a 94       	dec	r0
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <_ZN14ArduinoLibrary3Cio6clrPinEv+0xe>
 2a8:	11 96       	adiw	r26, 0x01	; 1
 2aa:	8c 91       	ld	r24, X
 2ac:	11 97       	sbiw	r26, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	82 23       	and	r24, r18
 2b2:	93 23       	and	r25, r19
 2b4:	28 17       	cp	r18, r24
 2b6:	39 07       	cpc	r19, r25
 2b8:	09 f0       	breq	.+2      	; 0x2bc <_ZN14ArduinoLibrary3Cio6clrPinEv+0x2a>
 2ba:	08 95       	ret
		// write to the bit location in the register associated with this object
		*(uint8_t*)(_base_peripheral_address+2) &= ~(1 << _shift_amt);
 2bc:	20 95       	com	r18
 2be:	12 96       	adiw	r26, 0x02	; 2
 2c0:	8c 91       	ld	r24, X
 2c2:	12 97       	sbiw	r26, 0x02	; 2
 2c4:	82 23       	and	r24, r18
 2c6:	12 96       	adiw	r26, 0x02	; 2
 2c8:	8c 93       	st	X, r24
 2ca:	12 97       	sbiw	r26, 0x02	; 2
 2cc:	08 95       	ret

000002ce <_ZN14ArduinoLibrary3Cio4readEv>:
	} 
}

uint8_t Cio::read()
{
 2ce:	fc 01       	movw	r30, r24
	uint8_t result = (*(uint8_t*)(_base_peripheral_address) & (1 << _shift_amt));
 2d0:	42 81       	ldd	r20, Z+2	; 0x02
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	04 2e       	mov	r0, r20
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <_ZN14ArduinoLibrary3Cio4readEv+0x10>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <_ZN14ArduinoLibrary3Cio4readEv+0xc>
 2e2:	01 90       	ld	r0, Z+
 2e4:	f0 81       	ld	r31, Z
 2e6:	e0 2d       	mov	r30, r0
 2e8:	80 81       	ld	r24, Z
 2ea:	82 23       	and	r24, r18
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_ZN14ArduinoLibrary3Cio4readEv+0x26>
 2f0:	95 95       	asr	r25
 2f2:	87 95       	ror	r24
 2f4:	4a 95       	dec	r20
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <_ZN14ArduinoLibrary3Cio4readEv+0x22>
	return (result >> _shift_amt);
}
 2f8:	08 95       	ret

000002fa <_ZN14ArduinoLibrary3Cio5writeEh>:

void Cio::write(uint8_t value)
{
	if (value){
 2fa:	66 23       	and	r22, r22
 2fc:	19 f4       	brne	.+6      	; 0x304 <_ZN14ArduinoLibrary3Cio5writeEh+0xa>
		setPin();
	}
	else{
		clrPin();
 2fe:	0e 94 49 01 	call	0x292	; 0x292 <_ZN14ArduinoLibrary3Cio6clrPinEv>
 302:	08 95       	ret
}

void Cio::write(uint8_t value)
{
	if (value){
		setPin();
 304:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN14ArduinoLibrary3Cio6setPinEv>
 308:	08 95       	ret

0000030a <main>:
	/**  
    	Overloaded overator for "=".  Changes only occur if the object is an OUTPUT.
		Used for shorthand notation while coding.
  	*/
	Cio& operator= (uint8_t in){ 
		write(in); 
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14ArduinoLibrary3Cio5writeEh>
	/**  
    	Overloaded overator for "=".  This variant is used to read the state on an input
		or output into a variable of any type.
  	*/
	operator uint8_t(){
		return read(); 
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN14ArduinoLibrary3Cio4readEv>
	/**  
    	Overloaded overator for "=".  Changes only occur if the object is an OUTPUT.
		Used for shorthand notation while coding.
  	*/
	Cio& operator= (uint8_t in){ 
		write(in); 
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14ArduinoLibrary3Cio5writeEh>
	/**  
    	Overloaded overator for "=".  This variant is used to read the state on an input
		or output into a variable of any type.
  	*/
	operator uint8_t(){
		return read(); 
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN14ArduinoLibrary3Cio4readEv>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	dc 01       	movw	r26, r24
	pin1 = 0;
	tmp = pin1;

	while(1){

		for(uint32_t i=0; i<280000; i++);
 334:	80 3c       	cpi	r24, 0xC0	; 192
 336:	25 e4       	ldi	r18, 0x45	; 69
 338:	92 07       	cpc	r25, r18
 33a:	24 e0       	ldi	r18, 0x04	; 4
 33c:	a2 07       	cpc	r26, r18
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	b2 07       	cpc	r27, r18
 342:	78 f0       	brcs	.+30     	; 0x362 <main+0x58>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN14ArduinoLibrary3Cio4readEv>
		
		if (pin1 == 1)
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	69 f0       	breq	.+26     	; 0x36a <main+0x60>
	/**  
    	Overloaded overator for "=".  Changes only occur if the object is an OUTPUT.
		Used for shorthand notation while coding.
  	*/
	Cio& operator= (uint8_t in){ 
		write(in); 
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14ArduinoLibrary3Cio5writeEh>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	dc 01       	movw	r26, r24
 360:	e9 cf       	rjmp	.-46     	; 0x334 <main+0x2a>
	pin1 = 0;
	tmp = pin1;

	while(1){

		for(uint32_t i=0; i<280000; i++);
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	a1 1d       	adc	r26, r1
 366:	b1 1d       	adc	r27, r1
 368:	e5 cf       	rjmp	.-54     	; 0x334 <main+0x2a>
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14ArduinoLibrary3Cio5writeEh>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	dc 01       	movw	r26, r24
 37a:	dc cf       	rjmp	.-72     	; 0x334 <main+0x2a>

0000037c <T.1>:
		if (pin1 == 1)
			pin1 = 0;
		else
			pin1 = 1;
	}
}
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	91 05       	cpc	r25, r1
 380:	39 f0       	breq	.+14     	; 0x390 <T.1+0x14>
// Test implementation file
//

#include "ArduinoLib.h"

Cio pin1 (PIN_PB5, PINTYPE_OUTPUT);
 382:	00 97       	sbiw	r24, 0x00	; 0
 384:	21 f4       	brne	.+8      	; 0x38e <T.1+0x12>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 56 00 	call	0xac	; 0xac <_ZN14ArduinoLibrary3CioD1Ev>
 38e:	08 95       	ret
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	71 e0       	ldi	r23, 0x01	; 1
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN14ArduinoLibrary3CioC1ENS_7PinNameENS_7PinTypeENS_13BuiltInPullUpE>
 3a0:	08 95       	ret

000003a2 <_GLOBAL__I_pin1>:
		if (pin1 == 1)
			pin1 = 0;
		else
			pin1 = 1;
	}
}
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 be 01 	call	0x37c	; 0x37c <T.1>
 3aa:	08 95       	ret

000003ac <_GLOBAL__D_pin1>:
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 be 01 	call	0x37c	; 0x37c <T.1>
 3b4:	08 95       	ret

000003b6 <__tablejump2__>:
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31

000003ba <__tablejump__>:
 3ba:	05 90       	lpm	r0, Z+
 3bc:	f4 91       	lpm	r31, Z+
 3be:	e0 2d       	mov	r30, r0
 3c0:	09 94       	ijmp

000003c2 <__do_global_dtors>:
 3c2:	10 e0       	ldi	r17, 0x00	; 0
 3c4:	ca e6       	ldi	r28, 0x6A	; 106
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
 3c8:	04 c0       	rjmp	.+8      	; 0x3d2 <__do_global_dtors+0x10>
 3ca:	fe 01       	movw	r30, r28
 3cc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__tablejump__>
 3d0:	22 96       	adiw	r28, 0x02	; 2
 3d2:	cc 36       	cpi	r28, 0x6C	; 108
 3d4:	d1 07       	cpc	r29, r17
 3d6:	c9 f7       	brne	.-14     	; 0x3ca <__do_global_dtors+0x8>
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
